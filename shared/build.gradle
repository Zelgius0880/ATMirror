apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            buildConfigField("String", "DARKSKY_KEY", getProps("darkSky_key") )
            buildConfigField("double", "LATITUDE", getProps("latitude") )
            buildConfigField("double", "LONGITUDE", getProps("longitude") )
        }
        release {
            buildConfigField("String", "DARKSKY_KEY", getProps("darkSky_key") )
            buildConfigField("double", "LATITUDE", getProps("latitude") )
            buildConfigField("double", "LONGITUDE", getProps("longitude") )
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

apply plugin: 'kotlin-kapt'

dependencies {
    def lifecycle_version = '2.2.0-alpha01'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    /* implementation 'com.google.android.things.contrib:driver-bmx280:0.2'*/

    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.appcompat:appcompat:1.0.2'
    api 'com.google.firebase:firebase-database:17.0.0'


    //UI
    api 'com.google.android.material:material:1.0.0'
    api 'androidx.constraintlayout:constraintlayout:1.1.3'

    // ViewModel and LiveData
    api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    def work_version = "1.0.1"
    api "android.arch.work:work-runtime-ktx:$work_version"

    //Room
    def room_version = '2.1.0'
    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    api "androidx.room:room-ktx:$room_version"

    //KTX & coroutines
    api 'androidx.core:core-ktx:1.0.2'
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0-alpha-2'

    // Tests
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Other Libraries
    api 'gov.nist.math:jama:1.0.3'
    api 'com.jjoe64:graphview:4.2.2'
    api group: 'com.github.hotchemi', name: 'khronos', version: '0.9.0'
    api 'com.facebook.stetho:stetho:1.5.1'
    api 'com.squareup.retrofit2:retrofit:2.6.0'
    api 'com.squareup.retrofit2:converter-gson:2.6.0'
    api 'com.google.code.gson:gson:2.8.5'
}

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}